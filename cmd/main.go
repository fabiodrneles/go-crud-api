// @title        Task Manager API
// @version      1.0
// @description  This is a simple CRUD API for managing tasks.
// @host         localhost:8080
// @BasePath     /
package main

import (
	// Standard library packages
	"context"
	"log"
	"net/http"
	"time"

	// Internal packages
	_ "go-crud-api/docs" // Generated by Swag CLI
	"go-crud-api/models"

	// Third-party packages
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

var collection *mongo.Collection

func connectDB() {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	clientOptions := options.Client().ApplyURI("mongodb://localhost:27017")
	client, err := mongo.Connect(ctx, clientOptions)
	if err != nil {
		log.Fatal("Failed to create MongoDB client:", err)
	}
	err = client.Ping(ctx, nil)
	if err != nil {
		log.Fatal("Failed to connect to MongoDB:", err)
	}
	collection = client.Database("taskdb").Collection("tasks")
	log.Println("âœ… Connected to MongoDB!")
}

// createTask godoc
// @Summary      Create a new task
// @Description  Adds a new task to the collection.
// @Tags         tasks
// @Accept       json
// @Produce      json
// @Param        task  body      models.Task           true  "Task Creation Object"
// @Success      201   {object}  map[string]string
// @Failure      400   {object}  map[string]string
// @Failure      500   {object}  map[string]string
// @Router       /tasks [post]
func createTask(c *gin.Context) {
	var task models.Task
	if err := c.ShouldBindJSON(&task); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid JSON: " + err.Error()})
		return
	}
	task.CreatedAt = time.Now()
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	result, err := collection.InsertOne(ctx, task)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to insert task: " + err.Error()})
		return
	}
	c.JSON(http.StatusCreated, gin.H{"id": result.InsertedID})
}

// listTask godoc
// @Summary      List all tasks
// @Description  Retrieves a complete list of all tasks.
// @Tags         tasks
// @Produce      json
// @Success      200 {array}  models.Task
// @Failure      500 {object} map[string]string
// @Router       /tasks [get]
func listTask(c *gin.Context) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	cursor, err := collection.Find(ctx, bson.M{})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to fetch tasks: " + err.Error()})
		return
	}
	defer cursor.Close(ctx)
	var tasks []models.Task
	if err = cursor.All(ctx, &tasks); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to decode tasks: " + err.Error()})
		return
	}
	c.JSON(http.StatusOK, tasks)
}

// updateTask godoc
// @Summary      Update an existing task
// @Description  Updates a task's information by its ID.
// @Tags         tasks
// @Accept       json
// @Produce      json
// @Param        id    path      string                true  "Task ID"
// @Param        task  body      models.Task           true  "Task Update Object"
// @Success      200   {object}  map[string]string
// @Failure      400   {object}  map[string]string
// @Failure      404   {object}  map[string]string
// @Failure      500   {object}  map[string]string
// @Router       /tasks/{id} [put]
func updateTask(c *gin.Context) {
	idParam := c.Param("id")
	objID, err := primitive.ObjectIDFromHex(idParam)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}
	var task models.Task
	if err := c.ShouldBindJSON(&task); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid JSON: " + err.Error()})
		return
	}
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	filter := bson.M{"_id": objID}
	update := bson.M{"$set": task}
	result, err := collection.UpdateOne(ctx, filter, update)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to update task: " + err.Error()})
		return
	}
	if result.MatchedCount == 0 {
		c.JSON(http.StatusNotFound, gin.H{"error": "Task not found"})
		return
	}
	c.JSON(http.StatusOK, gin.H{"message": "Task successfully updated"})
}

// deleteTask godoc
// @Summary      Delete a task
// @Description  Removes a task from the collection by its ID.
// @Tags         tasks
// @Produce      json
// @Param        id   path      string             true  "Task ID"
// @Success      200  {object}  map[string]string
// @Failure      400  {object}  map[string]string
// @Failure      404  {object}  map[string]string
// @Failure      500  {object}  map[string]string
// @Router       /tasks/{id} [delete]
func deleteTask(c *gin.Context) {
	idParam := c.Param("id")
	objID, err := primitive.ObjectIDFromHex(idParam)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	result, err := collection.DeleteOne(ctx, bson.M{"_id": objID})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to delete task: " + err.Error()})
		return
	}
	if result.DeletedCount == 0 {
		c.JSON(http.StatusNotFound, gin.H{"error": "Task not found"})
		return
	}
	c.JSON(http.StatusOK, gin.H{"message": "Task successfully deleted"})
}

func main() {
	connectDB()
	router := gin.Default()

	router.Use(cors.New(cors.Config{
		AllowOrigins:     []string{"http://localhost:3000"},
		AllowMethods:     []string{"GET", "POST", "PUT", "DELETE"},
		AllowHeaders:     []string{"Origin", "Content-Type"},
		AllowCredentials: true,
	}))

	// --- Rota do Swagger ---
	url := ginSwagger.URL("http://localhost:8080/swagger/doc.json")
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))

	// Rotas da API
	taskRoutes := router.Group("/tasks")
	{
		taskRoutes.GET("", listTask)
		taskRoutes.POST("", createTask)
		taskRoutes.PUT("/:id", updateTask)
		taskRoutes.DELETE("/:id", deleteTask)
	}

	log.Println("ðŸš€ Server running on port :8080")
	log.Println("ðŸ“„ API documentation available at http://localhost:8080/swagger/index.html")
	router.Run(":8080")
}
